#!/usr/bin/env python

import datetime
import dateutil.parser
import json
import os
import time
import urllib2
import yaml
from OmegaExpansion import oledExp


def wiener_linien_monitor_request(api_key, rbl):
    req = urllib2.Request(
        "https://www.wienerlinien.at/ogd_realtime/monitor?sender=%s&rbl=%s"
            % (api_key, rbl),
    )
    req.add_header("Accept", "application/json")
    req.add_header("Content-Type", "application/json")
    resp = urllib2.urlopen(req)
    return json.loads(resp.read())


def run(config_path):
    with open(config_path, 'r') as config_file:
        config = yaml.load(config_file.read())
    wiener_linien_api_key = config['wiener_linien_api_key']
    assert not oledExp.driverInit()
    assert not oledExp.setDisplayPower(1)

    while True:
        oledExp.clear()
        oledExp.setCursor(0, 0)
        oledExp.write(datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        try:
            resp = wiener_linien_monitor_request(
                api_key=wiener_linien_api_key,
                rbl=4648,
            )
        except urllib2.HTTPError:
            resp = None
        if resp:
            # datetime.datetime.strptime:
            # ValueError: 'z' is a bad directive in format
            # '%Y-%m-%dT%H:%M:%S.%f%z'
            server_time = dateutil.parser.parse(resp['message']['serverTime'])
            print(server_time)
            monitors = resp['data']['monitors']
            assert 1 == len(monitors)
            lines = monitors[0]['lines']
            assert 1 == len(lines)
            for line in lines:
                assert 1 == len(line['departures'])
                for i, departure in enumerate(line['departures']['departure']):
                    if 'vehicle' in departure:
                        line_name = departure['vehicle']['name']
                        towards = departure['vehicle']['towards']
                    else:
                        line_name = line['name']
                        towards = line['towards']
                    print(line_name, towards, departure['departureTime'])
                    oledExp.setCursor(1 + i, 0)
                    oledExp.write("%s %s %s" %
                                  (departure['departureTime']['countdown'], line_name, towards))
        time.sleep(9.9)


def _init_argparser():
    import argparse
    argparser = argparse.ArgumentParser()
    argparser.add_argument(
        '-c', '--config-path',
        dest='config_path',
        type=str,
        default=os.path.join(os.path.expanduser('~'), '.omegalines'),
        help='default: %(default)s',
    )
    return argparser


def main(argv):
    argparser = _init_argparser()
    args = argparser.parse_args(argv)
    run(**vars(args))
    return 0

if __name__ == "__main__":
    import sys
    sys.exit(main(sys.argv[1:]))
