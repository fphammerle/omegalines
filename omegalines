#!/usr/bin/env python

import datetime
import dateutil.parser
import json
import os
import time
import urllib2
import yaml
from OmegaExpansion import oledExp

class Departure:
    def __init__(self, line, towards, predicted_time):
        self.line = line
        self.towards = towards
        self.predicted_time = predicted_time

def request_wiener_linien_departures(api_key, rbl):
    req = urllib2.Request(
        "https://www.wienerlinien.at/ogd_realtime/monitor?sender=%s&rbl=%s"
            % (api_key, rbl),
    )
    req.add_header("Accept", "application/json")
    req.add_header("Content-Type", "application/json")
    resp = urllib2.urlopen(req)
    resp_data = json.loads(resp.read())
    # datetime.datetime.strptime:
    # ValueError: 'z' is a bad directive in format
    # '%Y-%m-%dT%H:%M:%S.%f%z'
    server_time = dateutil.parser.parse(resp_data['message']['serverTime'])
    monitors_data = resp_data['data']['monitors']
    assert 1 == len(monitors_data)
    departures = []
    for line_data in monitors_data[0]['lines']:
        assert 1 == len(line_data['departures'])
        for departure_data in line_data['departures']['departure']:
            departures.append(Departure(
                line=departure_data['vehicle']['name'] if 'vehicle' in departure_data else line_data['name'],
                towards=departure_data['vehicle']['towards'] if 'towards' in departure_data else line_data['towards'],
                predicted_time=dateutil.parser.parse(departure_data['departureTime']['timeReal']),
            ))
    return server_time, departures


def run(config_path):
    with open(config_path, 'r') as config_file:
        config = yaml.load(config_file.read())
    wiener_linien_api_key = config['wiener_linien_api_key']
    assert not oledExp.driverInit()
    assert not oledExp.setDisplayPower(1)

    while True:
        oledExp.clear()
        oledExp.setCursor(0, 0)
        oledExp.write(datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        try:
            server_time, departures = request_wiener_linien_departures(
                api_key=wiener_linien_api_key,
                rbl=4648,
            )
        except urllib2.HTTPError:
            departures = None
        if departures:
            for departure_idx, departure in enumerate(departures):
                oledExp.setCursor(1 + departure_idx, 0)
                oledExp.write("%s %s %s" % (
                    departure.predicted_time.strftime('%H:%M:%S'),
                    departure.line,
                    departure.towards,
                ))
        time.sleep(9.9)


def _init_argparser():
    import argparse
    argparser = argparse.ArgumentParser()
    argparser.add_argument(
        '-c', '--config-path',
        dest='config_path',
        type=str,
        default=os.path.join(os.path.expanduser('~'), '.omegalines'),
        help='default: %(default)s',
    )
    return argparser


def main(argv):
    argparser = _init_argparser()
    args = argparser.parse_args(argv)
    run(**vars(args))
    return 0

if __name__ == "__main__":
    import sys
    sys.exit(main(sys.argv[1:]))
